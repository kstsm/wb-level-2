package main

import "fmt"

//Что выведет программа?
//Объяснить порядок выполнения defer функций и итоговый вывод.

// Функция test выведет 2, а в функции anotherTest будет 1

// defer функция всегда выполняется в обратном порядке (снизу вверх).

// В функции test используется именованный результат.
// Это означает, что переменная x объявляется как часть сигнатуры функции,
// и нам не нужно создавать ее отдельно внутри функции.
// Благодаря этому функция defer имеет доступ к возвращаемой переменной
// и может изменить ее значение перед завершением работы функции.
func test() (x int) {
	defer func() {
		x++
	}()
	x = 1
	return
}

// В функции anotherTest результат неименованный.
// Здесь переменная x является обычной локальной переменной,
// а return возвращает ее текущее значение, делая копию.
// После этого выполняется defer, который увеличивает локальную переменную x,
// но это уже не влияет на результат, так как возвращаемое значение было сохранено раньше.
func anotherTest() int {
	var x int
	defer func() {
		x++
	}()
	x = 1
	return x
}

func main() {
	fmt.Println(test())
	fmt.Println(anotherTest())
}
