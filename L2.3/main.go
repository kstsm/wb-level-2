package main

import (
	"fmt"
	"os"
)

//Что выведет программа?
//Объяснить внутреннее устройство интерфейсов и их отличие от пустых интерфейсов.

// Программа выведет <nil> и  false

// Интерфейсы в Go внутри хранят два поля: тип и значение.
// Foo возвращает nil указатель, но с конкретным типом *os.PathError.
// Интерфейс error получает тип *os.PathError,
// а значение остаётся nil. Поэтому интерфейс уже не пустой.
// fmt.Println(err) смотрит на значение внутри интерфейса, а оно nil. Поэтому вывод nil.
// Но сравнение err == nil дает false, так как интерфейс содержит тип и не считается пустым.

// Отличие от пустого интерфейса:
// Пустой интерфейс не содержит ни типа, ни значения, поэтому это настоящий nil.
// Любой другой интерфейс может содержать тип даже если значение nil.
// Такой интерфейс уже не равен nil, потому что внутри хранится информация о типе.

func Foo() error {
	var err *os.PathError = nil
	return err
}

func main() {
	err := Foo()
	fmt.Println(err)
	fmt.Println(err == nil)
}
